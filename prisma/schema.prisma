generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  fullName      String
  username      String       @unique
  email         String?      @unique
  password      String
  roleId        Int
  tokenVersion  Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  role          Role         @relation(fields: [roleId], references: [id])
  createdCoas   master_coa[] @relation("CreatedBy")
  approvedCoas  master_coa[] @relation("ApprovedBy")
  deletedCoasCreated   deleted_coa[] @relation("DeletedCreatedBy", map: "deleted_coa_created_fkey")
  deletedCoasApproved  deleted_coa[] @relation("DeletedApprovedBy", map: "deleted_coa_approved_fkey")
  deletedCoas          deleted_coa[] @relation("DeletedBy", map: "deleted_coa_deleted_fkey")
  restoredCoas         deleted_coa[] @relation("RestoredBy", map: "deleted_coa_restored_fkey")
  logs Log[]
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  roles       RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model master_product {
  id                 Int      @id @default(autoincrement())
  productName        String
  resin              String?
  letDownRatio       String?
  pellet             String?
  color              String?
  dispersibility     String?
  mfr                Float?
  density            Float?
  moisture           Float?
  carbonContent      Float?
  foreignMatter      String?
  weightOfChips      Float?
  intrinsicViscosity Float?
  ashContent         Float?
  heatStability      Float?
  lightFastness      Float?
  granule            String?
  deltaE             Float?
  macaroni           Float?
}

model master_coa {
  id                Int      @id @default(autoincrement())
  costumerName      String
  productName       String
  lotNumber         String
  quantity          Float?
  letDownResin      String?
  pelletLength      Float?
  pelletDimension   Float?
  pelletVisual      Boolean?
  color             String?
  dispersibility    String?
  mfr               Float?
  density           Float?
  moisture          Float?
  carbonContent     Float?
  mfgDate           DateTime?
  expiryDate        DateTime?
  analysisDate      DateTime?
  printedDate       DateTime?
  foreignMatter     String?
  weightOfChips     Float?
  intrinsicViscosity Float?
  ashContent        Float?
  heatStability     Float?
  lightFastness     Float?
  granule           String?
  deltaE            Float?
  macaroni          Float?
  issueBy           String?
  status            String   @default("draft")
  approvedBy        Int?
  approvedDate      DateTime?
  createdBy         Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  creator           User     @relation("CreatedBy", fields: [createdBy], references: [id])
  approver          User?    @relation("ApprovedBy", fields: [approvedBy], references: [id])
  logs Log[]
  customer          master_customer? @relation("CustomerCoas", fields: [customerId], references: [id])
  customerId        Int?
}

model deleted_coa {
  id                Int      @id @default(autoincrement())
  costumerName      String
  productName       String
  lotNumber         String
  letDownResin      String?
  quantity          Float?
  pelletLength      Float?
  pelletDimension   Float?
  pelletVisual      Boolean?
  color             String?
  dispersibility    String?
  mfr               Float?
  density           Float?
  moisture          Float?
  carbonContent     Float?
  mfgDate           DateTime?
  expiryDate        DateTime?
  analysisDate      DateTime?
  printedDate       DateTime?
  foreignMatter     String?
  weightOfChips     Float?
  intrinsicViscosity Float?
  ashContent        Float?
  heatStability     Float?
  lightFastness     Float?
  granule           String?
  deltaE            Float?
  macaroni          Float?
  issueBy           String?
  approvedBy        Int?
  approvedDate      DateTime?
  createdBy         Int?
  createdAt         DateTime?
  updatedAt         DateTime?
  deletedBy         Int?
  deletedAt         DateTime @default(now())
  isRestored        Boolean  @default(false)
  restoredAt        DateTime?
  restoredBy        Int?
  originalId        Int      @unique
  creator           User?    @relation("DeletedCreatedBy", fields: [createdBy], references: [id])
  approver          User?    @relation("DeletedApprovedBy", fields: [approvedBy], references: [id])
  deleter           User?    @relation("DeletedBy", fields: [deletedBy], references: [id])
  restorer          User?    @relation("RestoredBy", fields: [restoredBy], references: [id])
}

model master_customer {
  id                Int      @id @default(autoincrement())
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  coas              master_coa[] @relation("CustomerCoas")
  mandatoryFields   MandatoryField[]
  @@unique([name])
}

model MandatoryField {
  id          Int      @id @default(autoincrement())
  fieldName   String   // Nama kolom dari master_coa (contoh: 'costumerName', 'productName', dll)
  customerId  Int
  customer    master_customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([customerId, fieldName])
  @@index([fieldName])
}

model Log {
  id          Int      @id @default(autoincrement())
  action      String   
  description String  
  coaId       Int?     
  userId      Int      
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  coa         master_coa? @relation(fields: [coaId], references: [id])

  @@map("logs")
}